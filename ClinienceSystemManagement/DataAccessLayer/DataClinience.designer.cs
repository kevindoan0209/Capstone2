#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClinienceSystemManagement")]
	public partial class DataClinienceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccount_Type(Account_Type instance);
    partial void UpdateAccount_Type(Account_Type instance);
    partial void DeleteAccount_Type(Account_Type instance);
    partial void InsertAllergic(Allergic instance);
    partial void UpdateAllergic(Allergic instance);
    partial void DeleteAllergic(Allergic instance);
    partial void InsertAllergic_Type(Allergic_Type instance);
    partial void UpdateAllergic_Type(Allergic_Type instance);
    partial void DeleteAllergic_Type(Allergic_Type instance);
    partial void InsertAppointmentss(Appointmentss instance);
    partial void UpdateAppointmentss(Appointmentss instance);
    partial void DeleteAppointmentss(Appointmentss instance);
    partial void InsertClinience(Clinience instance);
    partial void UpdateClinience(Clinience instance);
    partial void DeleteClinience(Clinience instance);
    partial void InsertDisease(Disease instance);
    partial void UpdateDisease(Disease instance);
    partial void DeleteDisease(Disease instance);
    partial void InsertHuman(Human instance);
    partial void UpdateHuman(Human instance);
    partial void DeleteHuman(Human instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertMedicine_Unit(Medicine_Unit instance);
    partial void UpdateMedicine_Unit(Medicine_Unit instance);
    partial void DeleteMedicine_Unit(Medicine_Unit instance);
    partial void InsertMedincine_Ingredient(Medincine_Ingredient instance);
    partial void UpdateMedincine_Ingredient(Medincine_Ingredient instance);
    partial void DeleteMedincine_Ingredient(Medincine_Ingredient instance);
    partial void InsertParaclinical(Paraclinical instance);
    partial void UpdateParaclinical(Paraclinical instance);
    partial void DeleteParaclinical(Paraclinical instance);
    partial void InsertParaclinical_Group(Paraclinical_Group instance);
    partial void UpdateParaclinical_Group(Paraclinical_Group instance);
    partial void DeleteParaclinical_Group(Paraclinical_Group instance);
    partial void InsertParaclinical_Medicine(Paraclinical_Medicine instance);
    partial void UpdateParaclinical_Medicine(Paraclinical_Medicine instance);
    partial void DeleteParaclinical_Medicine(Paraclinical_Medicine instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPrecription(Precription instance);
    partial void UpdatePrecription(Precription instance);
    partial void DeletePrecription(Precription instance);
    partial void InsertPrecription_Disease(Precription_Disease instance);
    partial void UpdatePrecription_Disease(Precription_Disease instance);
    partial void DeletePrecription_Disease(Precription_Disease instance);
    partial void InsertPrecription_Medicine(Precription_Medicine instance);
    partial void UpdatePrecription_Medicine(Precription_Medicine instance);
    partial void DeletePrecription_Medicine(Precription_Medicine instance);
    #endregion
		
		public DataClinienceDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.ClinienceSystemManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinienceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinienceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinienceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinienceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Account_Type> Account_Types
		{
			get
			{
				return this.GetTable<Account_Type>();
			}
		}
		
		public System.Data.Linq.Table<Allergic> Allergics
		{
			get
			{
				return this.GetTable<Allergic>();
			}
		}
		
		public System.Data.Linq.Table<Allergic_Type> Allergic_Types
		{
			get
			{
				return this.GetTable<Allergic_Type>();
			}
		}
		
		public System.Data.Linq.Table<Appointmentss> Appointmentsses
		{
			get
			{
				return this.GetTable<Appointmentss>();
			}
		}
		
		public System.Data.Linq.Table<Clinience> Cliniences
		{
			get
			{
				return this.GetTable<Clinience>();
			}
		}
		
		public System.Data.Linq.Table<Disease> Diseases
		{
			get
			{
				return this.GetTable<Disease>();
			}
		}
		
		public System.Data.Linq.Table<Human> Humans
		{
			get
			{
				return this.GetTable<Human>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Medicine_Unit> Medicine_Units
		{
			get
			{
				return this.GetTable<Medicine_Unit>();
			}
		}
		
		public System.Data.Linq.Table<Medincine_Ingredient> Medincine_Ingredients
		{
			get
			{
				return this.GetTable<Medincine_Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<Paraclinical> Paraclinicals
		{
			get
			{
				return this.GetTable<Paraclinical>();
			}
		}
		
		public System.Data.Linq.Table<Paraclinical_Group> Paraclinical_Groups
		{
			get
			{
				return this.GetTable<Paraclinical_Group>();
			}
		}
		
		public System.Data.Linq.Table<Paraclinical_Medicine> Paraclinical_Medicines
		{
			get
			{
				return this.GetTable<Paraclinical_Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Precription> Precriptions
		{
			get
			{
				return this.GetTable<Precription>();
			}
		}
		
		public System.Data.Linq.Table<Precription_Disease> Precription_Diseases
		{
			get
			{
				return this.GetTable<Precription_Disease>();
			}
		}
		
		public System.Data.Linq.Table<Precription_Medicine> Precription_Medicines
		{
			get
			{
				return this.GetTable<Precription_Medicine>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_ID;
		
		private string _Account_Name;
		
		private string _Account_UserName;
		
		private string _Account_Password;
		
		private System.Data.Linq.Binary _Account_Image;
		
		private System.Nullable<int> _Account_Type_ID;
		
		private string _Account_Signatures;
		
		private EntitySet<Appointmentss> _Appointmentsses;
		
		private EntityRef<Human> _Human;
		
		private EntitySet<Precription> _Precriptions;
		
		private EntityRef<Account_Type> _Account_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnAccount_NameChanging(string value);
    partial void OnAccount_NameChanged();
    partial void OnAccount_UserNameChanging(string value);
    partial void OnAccount_UserNameChanged();
    partial void OnAccount_PasswordChanging(string value);
    partial void OnAccount_PasswordChanged();
    partial void OnAccount_ImageChanging(System.Data.Linq.Binary value);
    partial void OnAccount_ImageChanged();
    partial void OnAccount_Type_IDChanging(System.Nullable<int> value);
    partial void OnAccount_Type_IDChanged();
    partial void OnAccount_SignaturesChanging(string value);
    partial void OnAccount_SignaturesChanged();
    #endregion
		
		public Account()
		{
			this._Appointmentsses = new EntitySet<Appointmentss>(new Action<Appointmentss>(this.attach_Appointmentsses), new Action<Appointmentss>(this.detach_Appointmentsses));
			this._Human = default(EntityRef<Human>);
			this._Precriptions = new EntitySet<Precription>(new Action<Precription>(this.attach_Precriptions), new Action<Precription>(this.detach_Precriptions));
			this._Account_Type = default(EntityRef<Account_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Account_Name
		{
			get
			{
				return this._Account_Name;
			}
			set
			{
				if ((this._Account_Name != value))
				{
					this.OnAccount_NameChanging(value);
					this.SendPropertyChanging();
					this._Account_Name = value;
					this.SendPropertyChanged("Account_Name");
					this.OnAccount_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_UserName", DbType="NVarChar(50)")]
		public string Account_UserName
		{
			get
			{
				return this._Account_UserName;
			}
			set
			{
				if ((this._Account_UserName != value))
				{
					this.OnAccount_UserNameChanging(value);
					this.SendPropertyChanging();
					this._Account_UserName = value;
					this.SendPropertyChanged("Account_UserName");
					this.OnAccount_UserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Password", DbType="NVarChar(50)")]
		public string Account_Password
		{
			get
			{
				return this._Account_Password;
			}
			set
			{
				if ((this._Account_Password != value))
				{
					this.OnAccount_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Account_Password = value;
					this.SendPropertyChanged("Account_Password");
					this.OnAccount_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Account_Image
		{
			get
			{
				return this._Account_Image;
			}
			set
			{
				if ((this._Account_Image != value))
				{
					this.OnAccount_ImageChanging(value);
					this.SendPropertyChanging();
					this._Account_Image = value;
					this.SendPropertyChanged("Account_Image");
					this.OnAccount_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_ID", DbType="Int")]
		public System.Nullable<int> Account_Type_ID
		{
			get
			{
				return this._Account_Type_ID;
			}
			set
			{
				if ((this._Account_Type_ID != value))
				{
					if (this._Account_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_ID = value;
					this.SendPropertyChanged("Account_Type_ID");
					this.OnAccount_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Signatures", DbType="NVarChar(50)")]
		public string Account_Signatures
		{
			get
			{
				return this._Account_Signatures;
			}
			set
			{
				if ((this._Account_Signatures != value))
				{
					this.OnAccount_SignaturesChanging(value);
					this.SendPropertyChanging();
					this._Account_Signatures = value;
					this.SendPropertyChanged("Account_Signatures");
					this.OnAccount_SignaturesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Appointmentss", Storage="_Appointmentsses", ThisKey="Account_ID", OtherKey="Account_ID_Doctor")]
		public EntitySet<Appointmentss> Appointmentsses
		{
			get
			{
				return this._Appointmentsses;
			}
			set
			{
				this._Appointmentsses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Human", Storage="_Human", ThisKey="Account_ID", OtherKey="Account_ID", IsUnique=true, IsForeignKey=false)]
		public Human Human
		{
			get
			{
				return this._Human.Entity;
			}
			set
			{
				Human previousValue = this._Human.Entity;
				if (((previousValue != value) 
							|| (this._Human.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Human.Entity = null;
						previousValue.Account = null;
					}
					this._Human.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Human");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Precription", Storage="_Precriptions", ThisKey="Account_ID", OtherKey="Account_ID_Doctor")]
		public EntitySet<Precription> Precriptions
		{
			get
			{
				return this._Precriptions;
			}
			set
			{
				this._Precriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Type_Account", Storage="_Account_Type", ThisKey="Account_Type_ID", OtherKey="Account_Type_ID", IsForeignKey=true)]
		public Account_Type Account_Type
		{
			get
			{
				return this._Account_Type.Entity;
			}
			set
			{
				Account_Type previousValue = this._Account_Type.Entity;
				if (((previousValue != value) 
							|| (this._Account_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account_Type.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Account_Type.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Account_Type_ID = value.Account_Type_ID;
					}
					else
					{
						this._Account_Type_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointmentsses(Appointmentss entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Appointmentsses(Appointmentss entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Precriptions(Precription entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Precriptions(Precription entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Type")]
	public partial class Account_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_Type_ID;
		
		private string _Account_Type_Authority;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_Type_IDChanging(int value);
    partial void OnAccount_Type_IDChanged();
    partial void OnAccount_Type_AuthorityChanging(string value);
    partial void OnAccount_Type_AuthorityChanged();
    #endregion
		
		public Account_Type()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Account_Type_ID
		{
			get
			{
				return this._Account_Type_ID;
			}
			set
			{
				if ((this._Account_Type_ID != value))
				{
					this.OnAccount_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_ID = value;
					this.SendPropertyChanged("Account_Type_ID");
					this.OnAccount_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_Authority", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Account_Type_Authority
		{
			get
			{
				return this._Account_Type_Authority;
			}
			set
			{
				if ((this._Account_Type_Authority != value))
				{
					this.OnAccount_Type_AuthorityChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_Authority = value;
					this.SendPropertyChanged("Account_Type_Authority");
					this.OnAccount_Type_AuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Type_Account", Storage="_Accounts", ThisKey="Account_Type_ID", OtherKey="Account_Type_ID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Account_Type = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Account_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Allergic")]
	public partial class Allergic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Allergic_ID;
		
		private int _Allergic_Type_ID;
		
		private int _Precription_ID;
		
		private string _Allergic_Name;
		
		private string _Allergic_Note;
		
		private EntityRef<Allergic_Type> _Allergic_Type;
		
		private EntityRef<Precription> _Precription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllergic_IDChanging(int value);
    partial void OnAllergic_IDChanged();
    partial void OnAllergic_Type_IDChanging(int value);
    partial void OnAllergic_Type_IDChanged();
    partial void OnPrecription_IDChanging(int value);
    partial void OnPrecription_IDChanged();
    partial void OnAllergic_NameChanging(string value);
    partial void OnAllergic_NameChanged();
    partial void OnAllergic_NoteChanging(string value);
    partial void OnAllergic_NoteChanged();
    #endregion
		
		public Allergic()
		{
			this._Allergic_Type = default(EntityRef<Allergic_Type>);
			this._Precription = default(EntityRef<Precription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergic_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Allergic_ID
		{
			get
			{
				return this._Allergic_ID;
			}
			set
			{
				if ((this._Allergic_ID != value))
				{
					this.OnAllergic_IDChanging(value);
					this.SendPropertyChanging();
					this._Allergic_ID = value;
					this.SendPropertyChanged("Allergic_ID");
					this.OnAllergic_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergic_Type_ID", DbType="Int NOT NULL")]
		public int Allergic_Type_ID
		{
			get
			{
				return this._Allergic_Type_ID;
			}
			set
			{
				if ((this._Allergic_Type_ID != value))
				{
					if (this._Allergic_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllergic_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Allergic_Type_ID = value;
					this.SendPropertyChanged("Allergic_Type_ID");
					this.OnAllergic_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_ID", DbType="Int NOT NULL")]
		public int Precription_ID
		{
			get
			{
				return this._Precription_ID;
			}
			set
			{
				if ((this._Precription_ID != value))
				{
					if (this._Precription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrecription_IDChanging(value);
					this.SendPropertyChanging();
					this._Precription_ID = value;
					this.SendPropertyChanged("Precription_ID");
					this.OnPrecription_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergic_Name", DbType="NVarChar(500)")]
		public string Allergic_Name
		{
			get
			{
				return this._Allergic_Name;
			}
			set
			{
				if ((this._Allergic_Name != value))
				{
					this.OnAllergic_NameChanging(value);
					this.SendPropertyChanging();
					this._Allergic_Name = value;
					this.SendPropertyChanged("Allergic_Name");
					this.OnAllergic_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergic_Note", DbType="NVarChar(500)")]
		public string Allergic_Note
		{
			get
			{
				return this._Allergic_Note;
			}
			set
			{
				if ((this._Allergic_Note != value))
				{
					this.OnAllergic_NoteChanging(value);
					this.SendPropertyChanging();
					this._Allergic_Note = value;
					this.SendPropertyChanged("Allergic_Note");
					this.OnAllergic_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Allergic_Type_Allergic", Storage="_Allergic_Type", ThisKey="Allergic_Type_ID", OtherKey="Allergic_Type_ID", IsForeignKey=true)]
		public Allergic_Type Allergic_Type
		{
			get
			{
				return this._Allergic_Type.Entity;
			}
			set
			{
				Allergic_Type previousValue = this._Allergic_Type.Entity;
				if (((previousValue != value) 
							|| (this._Allergic_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Allergic_Type.Entity = null;
						previousValue.Allergics.Remove(this);
					}
					this._Allergic_Type.Entity = value;
					if ((value != null))
					{
						value.Allergics.Add(this);
						this._Allergic_Type_ID = value.Allergic_Type_ID;
					}
					else
					{
						this._Allergic_Type_ID = default(int);
					}
					this.SendPropertyChanged("Allergic_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Allergic", Storage="_Precription", ThisKey="Precription_ID", OtherKey="Precription_ID", IsForeignKey=true)]
		public Precription Precription
		{
			get
			{
				return this._Precription.Entity;
			}
			set
			{
				Precription previousValue = this._Precription.Entity;
				if (((previousValue != value) 
							|| (this._Precription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Precription.Entity = null;
						previousValue.Allergics.Remove(this);
					}
					this._Precription.Entity = value;
					if ((value != null))
					{
						value.Allergics.Add(this);
						this._Precription_ID = value.Precription_ID;
					}
					else
					{
						this._Precription_ID = default(int);
					}
					this.SendPropertyChanged("Precription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Allergic_Type")]
	public partial class Allergic_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Allergic_Type_ID;
		
		private string _Allergic_Type_Name;
		
		private EntitySet<Allergic> _Allergics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllergic_Type_IDChanging(int value);
    partial void OnAllergic_Type_IDChanged();
    partial void OnAllergic_Type_NameChanging(string value);
    partial void OnAllergic_Type_NameChanged();
    #endregion
		
		public Allergic_Type()
		{
			this._Allergics = new EntitySet<Allergic>(new Action<Allergic>(this.attach_Allergics), new Action<Allergic>(this.detach_Allergics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergic_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Allergic_Type_ID
		{
			get
			{
				return this._Allergic_Type_ID;
			}
			set
			{
				if ((this._Allergic_Type_ID != value))
				{
					this.OnAllergic_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Allergic_Type_ID = value;
					this.SendPropertyChanged("Allergic_Type_ID");
					this.OnAllergic_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergic_Type_Name", DbType="NVarChar(50)")]
		public string Allergic_Type_Name
		{
			get
			{
				return this._Allergic_Type_Name;
			}
			set
			{
				if ((this._Allergic_Type_Name != value))
				{
					this.OnAllergic_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Allergic_Type_Name = value;
					this.SendPropertyChanged("Allergic_Type_Name");
					this.OnAllergic_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Allergic_Type_Allergic", Storage="_Allergics", ThisKey="Allergic_Type_ID", OtherKey="Allergic_Type_ID")]
		public EntitySet<Allergic> Allergics
		{
			get
			{
				return this._Allergics;
			}
			set
			{
				this._Allergics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Allergics(Allergic entity)
		{
			this.SendPropertyChanging();
			entity.Allergic_Type = this;
		}
		
		private void detach_Allergics(Allergic entity)
		{
			this.SendPropertyChanging();
			entity.Allergic_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointmentss")]
	public partial class Appointmentss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Appointment_ID;
		
		private int _Account_ID_Patient;
		
		private int _Account_ID_Doctor;
		
		private string _Appointment_Complain;
		
		private string _Appointment_Issue;
		
		private System.DateTime _Appointment_StartDate;
		
		private System.DateTime _Appointment_EndDate;
		
		private string _Appointment_Label;
		
		private string _Appointment_Note;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnAccount_ID_PatientChanging(int value);
    partial void OnAccount_ID_PatientChanged();
    partial void OnAccount_ID_DoctorChanging(int value);
    partial void OnAccount_ID_DoctorChanged();
    partial void OnAppointment_ComplainChanging(string value);
    partial void OnAppointment_ComplainChanged();
    partial void OnAppointment_IssueChanging(string value);
    partial void OnAppointment_IssueChanged();
    partial void OnAppointment_StartDateChanging(System.DateTime value);
    partial void OnAppointment_StartDateChanged();
    partial void OnAppointment_EndDateChanging(System.DateTime value);
    partial void OnAppointment_EndDateChanged();
    partial void OnAppointment_LabelChanging(string value);
    partial void OnAppointment_LabelChanged();
    partial void OnAppointment_NoteChanging(string value);
    partial void OnAppointment_NoteChanged();
    #endregion
		
		public Appointmentss()
		{
			this._Account = default(EntityRef<Account>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID_Patient", DbType="Int NOT NULL")]
		public int Account_ID_Patient
		{
			get
			{
				return this._Account_ID_Patient;
			}
			set
			{
				if ((this._Account_ID_Patient != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_ID_PatientChanging(value);
					this.SendPropertyChanging();
					this._Account_ID_Patient = value;
					this.SendPropertyChanged("Account_ID_Patient");
					this.OnAccount_ID_PatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID_Doctor", DbType="Int NOT NULL")]
		public int Account_ID_Doctor
		{
			get
			{
				return this._Account_ID_Doctor;
			}
			set
			{
				if ((this._Account_ID_Doctor != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_ID_DoctorChanging(value);
					this.SendPropertyChanging();
					this._Account_ID_Doctor = value;
					this.SendPropertyChanged("Account_ID_Doctor");
					this.OnAccount_ID_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_Complain", DbType="NVarChar(500)")]
		public string Appointment_Complain
		{
			get
			{
				return this._Appointment_Complain;
			}
			set
			{
				if ((this._Appointment_Complain != value))
				{
					this.OnAppointment_ComplainChanging(value);
					this.SendPropertyChanging();
					this._Appointment_Complain = value;
					this.SendPropertyChanged("Appointment_Complain");
					this.OnAppointment_ComplainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_Issue", DbType="NVarChar(500)")]
		public string Appointment_Issue
		{
			get
			{
				return this._Appointment_Issue;
			}
			set
			{
				if ((this._Appointment_Issue != value))
				{
					this.OnAppointment_IssueChanging(value);
					this.SendPropertyChanging();
					this._Appointment_Issue = value;
					this.SendPropertyChanged("Appointment_Issue");
					this.OnAppointment_IssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_StartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Appointment_StartDate
		{
			get
			{
				return this._Appointment_StartDate;
			}
			set
			{
				if ((this._Appointment_StartDate != value))
				{
					this.OnAppointment_StartDateChanging(value);
					this.SendPropertyChanging();
					this._Appointment_StartDate = value;
					this.SendPropertyChanged("Appointment_StartDate");
					this.OnAppointment_StartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_EndDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Appointment_EndDate
		{
			get
			{
				return this._Appointment_EndDate;
			}
			set
			{
				if ((this._Appointment_EndDate != value))
				{
					this.OnAppointment_EndDateChanging(value);
					this.SendPropertyChanging();
					this._Appointment_EndDate = value;
					this.SendPropertyChanged("Appointment_EndDate");
					this.OnAppointment_EndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_Label", DbType="NVarChar(100)")]
		public string Appointment_Label
		{
			get
			{
				return this._Appointment_Label;
			}
			set
			{
				if ((this._Appointment_Label != value))
				{
					this.OnAppointment_LabelChanging(value);
					this.SendPropertyChanging();
					this._Appointment_Label = value;
					this.SendPropertyChanged("Appointment_Label");
					this.OnAppointment_LabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_Note", DbType="NVarChar(200)")]
		public string Appointment_Note
		{
			get
			{
				return this._Appointment_Note;
			}
			set
			{
				if ((this._Appointment_Note != value))
				{
					this.OnAppointment_NoteChanging(value);
					this.SendPropertyChanging();
					this._Appointment_Note = value;
					this.SendPropertyChanged("Appointment_Note");
					this.OnAppointment_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Appointmentss", Storage="_Account", ThisKey="Account_ID_Doctor", OtherKey="Account_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Appointmentsses.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Appointmentsses.Add(this);
						this._Account_ID_Doctor = value.Account_ID;
					}
					else
					{
						this._Account_ID_Doctor = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointmentss", Storage="_Patient", ThisKey="Account_ID_Patient", OtherKey="Account_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointmentsses.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointmentsses.Add(this);
						this._Account_ID_Patient = value.Account_ID;
					}
					else
					{
						this._Account_ID_Patient = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clinience")]
	public partial class Clinience : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Clinience_ID;
		
		private string _Clinience_Name;
		
		private string _Clinience_Tel;
		
		private string _Clinience_Email;
		
		private string _Clinience_Address;
		
		private string _Clinience_Fax;
		
		private System.Nullable<int> _Clinience_Cost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinience_IDChanging(int value);
    partial void OnClinience_IDChanged();
    partial void OnClinience_NameChanging(string value);
    partial void OnClinience_NameChanged();
    partial void OnClinience_TelChanging(string value);
    partial void OnClinience_TelChanged();
    partial void OnClinience_EmailChanging(string value);
    partial void OnClinience_EmailChanged();
    partial void OnClinience_AddressChanging(string value);
    partial void OnClinience_AddressChanged();
    partial void OnClinience_FaxChanging(string value);
    partial void OnClinience_FaxChanged();
    partial void OnClinience_CostChanging(System.Nullable<int> value);
    partial void OnClinience_CostChanged();
    #endregion
		
		public Clinience()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Clinience_ID
		{
			get
			{
				return this._Clinience_ID;
			}
			set
			{
				if ((this._Clinience_ID != value))
				{
					this.OnClinience_IDChanging(value);
					this.SendPropertyChanging();
					this._Clinience_ID = value;
					this.SendPropertyChanged("Clinience_ID");
					this.OnClinience_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_Name", DbType="NVarChar(500)")]
		public string Clinience_Name
		{
			get
			{
				return this._Clinience_Name;
			}
			set
			{
				if ((this._Clinience_Name != value))
				{
					this.OnClinience_NameChanging(value);
					this.SendPropertyChanging();
					this._Clinience_Name = value;
					this.SendPropertyChanged("Clinience_Name");
					this.OnClinience_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_Tel", DbType="NVarChar(500)")]
		public string Clinience_Tel
		{
			get
			{
				return this._Clinience_Tel;
			}
			set
			{
				if ((this._Clinience_Tel != value))
				{
					this.OnClinience_TelChanging(value);
					this.SendPropertyChanging();
					this._Clinience_Tel = value;
					this.SendPropertyChanged("Clinience_Tel");
					this.OnClinience_TelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_Email", DbType="NVarChar(500)")]
		public string Clinience_Email
		{
			get
			{
				return this._Clinience_Email;
			}
			set
			{
				if ((this._Clinience_Email != value))
				{
					this.OnClinience_EmailChanging(value);
					this.SendPropertyChanging();
					this._Clinience_Email = value;
					this.SendPropertyChanged("Clinience_Email");
					this.OnClinience_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_Address", DbType="NVarChar(500)")]
		public string Clinience_Address
		{
			get
			{
				return this._Clinience_Address;
			}
			set
			{
				if ((this._Clinience_Address != value))
				{
					this.OnClinience_AddressChanging(value);
					this.SendPropertyChanging();
					this._Clinience_Address = value;
					this.SendPropertyChanged("Clinience_Address");
					this.OnClinience_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_Fax", DbType="NVarChar(500)")]
		public string Clinience_Fax
		{
			get
			{
				return this._Clinience_Fax;
			}
			set
			{
				if ((this._Clinience_Fax != value))
				{
					this.OnClinience_FaxChanging(value);
					this.SendPropertyChanging();
					this._Clinience_Fax = value;
					this.SendPropertyChanged("Clinience_Fax");
					this.OnClinience_FaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clinience_Cost", DbType="Int")]
		public System.Nullable<int> Clinience_Cost
		{
			get
			{
				return this._Clinience_Cost;
			}
			set
			{
				if ((this._Clinience_Cost != value))
				{
					this.OnClinience_CostChanging(value);
					this.SendPropertyChanging();
					this._Clinience_Cost = value;
					this.SendPropertyChanged("Clinience_Cost");
					this.OnClinience_CostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disease")]
	public partial class Disease : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Disease_ID;
		
		private string _Disease_Name;
		
		private string _Disease_Description;
		
		private EntitySet<Precription_Disease> _Precription_Diseases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisease_IDChanging(string value);
    partial void OnDisease_IDChanged();
    partial void OnDisease_NameChanging(string value);
    partial void OnDisease_NameChanged();
    partial void OnDisease_DescriptionChanging(string value);
    partial void OnDisease_DescriptionChanged();
    #endregion
		
		public Disease()
		{
			this._Precription_Diseases = new EntitySet<Precription_Disease>(new Action<Precription_Disease>(this.attach_Precription_Diseases), new Action<Precription_Disease>(this.detach_Precription_Diseases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Disease_ID
		{
			get
			{
				return this._Disease_ID;
			}
			set
			{
				if ((this._Disease_ID != value))
				{
					this.OnDisease_IDChanging(value);
					this.SendPropertyChanging();
					this._Disease_ID = value;
					this.SendPropertyChanged("Disease_ID");
					this.OnDisease_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Disease_Name
		{
			get
			{
				return this._Disease_Name;
			}
			set
			{
				if ((this._Disease_Name != value))
				{
					this.OnDisease_NameChanging(value);
					this.SendPropertyChanging();
					this._Disease_Name = value;
					this.SendPropertyChanged("Disease_Name");
					this.OnDisease_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_Description", DbType="NVarChar(500)")]
		public string Disease_Description
		{
			get
			{
				return this._Disease_Description;
			}
			set
			{
				if ((this._Disease_Description != value))
				{
					this.OnDisease_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Disease_Description = value;
					this.SendPropertyChanged("Disease_Description");
					this.OnDisease_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_Precription_Disease", Storage="_Precription_Diseases", ThisKey="Disease_ID", OtherKey="Disease_ID")]
		public EntitySet<Precription_Disease> Precription_Diseases
		{
			get
			{
				return this._Precription_Diseases;
			}
			set
			{
				this._Precription_Diseases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Precription_Diseases(Precription_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Disease = this;
		}
		
		private void detach_Precription_Diseases(Precription_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Disease = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Human")]
	public partial class Human : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_ID;
		
		private System.Nullable<System.DateTime> _Account_Age;
		
		private string _Account_Sex;
		
		private string _Account_Email;
		
		private string _Account_Phone;
		
		private string _Account_Job;
		
		private string _Account_City;
		
		private string _Account_Address;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnAccount_AgeChanging(System.Nullable<System.DateTime> value);
    partial void OnAccount_AgeChanged();
    partial void OnAccount_SexChanging(string value);
    partial void OnAccount_SexChanged();
    partial void OnAccount_EmailChanging(string value);
    partial void OnAccount_EmailChanged();
    partial void OnAccount_PhoneChanging(string value);
    partial void OnAccount_PhoneChanged();
    partial void OnAccount_JobChanging(string value);
    partial void OnAccount_JobChanged();
    partial void OnAccount_CityChanging(string value);
    partial void OnAccount_CityChanged();
    partial void OnAccount_AddressChanging(string value);
    partial void OnAccount_AddressChanged();
    #endregion
		
		public Human()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Age", DbType="Date")]
		public System.Nullable<System.DateTime> Account_Age
		{
			get
			{
				return this._Account_Age;
			}
			set
			{
				if ((this._Account_Age != value))
				{
					this.OnAccount_AgeChanging(value);
					this.SendPropertyChanging();
					this._Account_Age = value;
					this.SendPropertyChanged("Account_Age");
					this.OnAccount_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Sex", DbType="NVarChar(50)")]
		public string Account_Sex
		{
			get
			{
				return this._Account_Sex;
			}
			set
			{
				if ((this._Account_Sex != value))
				{
					this.OnAccount_SexChanging(value);
					this.SendPropertyChanging();
					this._Account_Sex = value;
					this.SendPropertyChanged("Account_Sex");
					this.OnAccount_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Email", DbType="NVarChar(50)")]
		public string Account_Email
		{
			get
			{
				return this._Account_Email;
			}
			set
			{
				if ((this._Account_Email != value))
				{
					this.OnAccount_EmailChanging(value);
					this.SendPropertyChanging();
					this._Account_Email = value;
					this.SendPropertyChanged("Account_Email");
					this.OnAccount_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Phone", DbType="NVarChar(50)")]
		public string Account_Phone
		{
			get
			{
				return this._Account_Phone;
			}
			set
			{
				if ((this._Account_Phone != value))
				{
					this.OnAccount_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Account_Phone = value;
					this.SendPropertyChanged("Account_Phone");
					this.OnAccount_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Job", DbType="NVarChar(50)")]
		public string Account_Job
		{
			get
			{
				return this._Account_Job;
			}
			set
			{
				if ((this._Account_Job != value))
				{
					this.OnAccount_JobChanging(value);
					this.SendPropertyChanging();
					this._Account_Job = value;
					this.SendPropertyChanged("Account_Job");
					this.OnAccount_JobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_City", DbType="NVarChar(50)")]
		public string Account_City
		{
			get
			{
				return this._Account_City;
			}
			set
			{
				if ((this._Account_City != value))
				{
					this.OnAccount_CityChanging(value);
					this.SendPropertyChanging();
					this._Account_City = value;
					this.SendPropertyChanged("Account_City");
					this.OnAccount_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Address", DbType="NVarChar(100)")]
		public string Account_Address
		{
			get
			{
				return this._Account_Address;
			}
			set
			{
				if ((this._Account_Address != value))
				{
					this.OnAccount_AddressChanging(value);
					this.SendPropertyChanging();
					this._Account_Address = value;
					this.SendPropertyChanged("Account_Address");
					this.OnAccount_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Human_Patient", Storage="_Patient", ThisKey="Account_ID", OtherKey="Account_ID", IsUnique=true, IsForeignKey=false)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Human = null;
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Human = this;
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Human", Storage="_Account", ThisKey="Account_ID", OtherKey="Account_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Human = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Human = this;
						this._Account_ID = value.Account_ID;
					}
					else
					{
						this._Account_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ingredient_ID;
		
		private string _Ingredient_Name;
		
		private string _Ingredient_Note;
		
		private string _Ingredient_Unit;
		
		private System.Nullable<double> _Ingredient_Content;
		
		private EntitySet<Medincine_Ingredient> _Medincine_Ingredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredient_IDChanging(int value);
    partial void OnIngredient_IDChanged();
    partial void OnIngredient_NameChanging(string value);
    partial void OnIngredient_NameChanged();
    partial void OnIngredient_NoteChanging(string value);
    partial void OnIngredient_NoteChanged();
    partial void OnIngredient_UnitChanging(string value);
    partial void OnIngredient_UnitChanged();
    partial void OnIngredient_ContentChanging(System.Nullable<double> value);
    partial void OnIngredient_ContentChanged();
    #endregion
		
		public Ingredient()
		{
			this._Medincine_Ingredients = new EntitySet<Medincine_Ingredient>(new Action<Medincine_Ingredient>(this.attach_Medincine_Ingredients), new Action<Medincine_Ingredient>(this.detach_Medincine_Ingredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Ingredient_ID
		{
			get
			{
				return this._Ingredient_ID;
			}
			set
			{
				if ((this._Ingredient_ID != value))
				{
					this.OnIngredient_IDChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_ID = value;
					this.SendPropertyChanged("Ingredient_ID");
					this.OnIngredient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Ingredient_Name
		{
			get
			{
				return this._Ingredient_Name;
			}
			set
			{
				if ((this._Ingredient_Name != value))
				{
					this.OnIngredient_NameChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_Name = value;
					this.SendPropertyChanged("Ingredient_Name");
					this.OnIngredient_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_Note", DbType="NVarChar(500)")]
		public string Ingredient_Note
		{
			get
			{
				return this._Ingredient_Note;
			}
			set
			{
				if ((this._Ingredient_Note != value))
				{
					this.OnIngredient_NoteChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_Note = value;
					this.SendPropertyChanged("Ingredient_Note");
					this.OnIngredient_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_Unit", DbType="NVarChar(50)")]
		public string Ingredient_Unit
		{
			get
			{
				return this._Ingredient_Unit;
			}
			set
			{
				if ((this._Ingredient_Unit != value))
				{
					this.OnIngredient_UnitChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_Unit = value;
					this.SendPropertyChanged("Ingredient_Unit");
					this.OnIngredient_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_Content", DbType="Float")]
		public System.Nullable<double> Ingredient_Content
		{
			get
			{
				return this._Ingredient_Content;
			}
			set
			{
				if ((this._Ingredient_Content != value))
				{
					this.OnIngredient_ContentChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_Content = value;
					this.SendPropertyChanged("Ingredient_Content");
					this.OnIngredient_ContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Medincine_Ingredient", Storage="_Medincine_Ingredients", ThisKey="Ingredient_ID", OtherKey="Ingredient_ID")]
		public EntitySet<Medincine_Ingredient> Medincine_Ingredients
		{
			get
			{
				return this._Medincine_Ingredients;
			}
			set
			{
				this._Medincine_Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medincine_Ingredients(Medincine_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_Medincine_Ingredients(Medincine_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Medicine_ID;
		
		private string _Medicine_Name;
		
		private string _Medicine_Class;
		
		private int _Unit_ID;
		
		private string _Medicine_Usage;
		
		private string _Medicine_Note;
		
		private System.Nullable<int> _Medicine_Price;
		
		private EntitySet<Medincine_Ingredient> _Medincine_Ingredients;
		
		private EntitySet<Precription_Medicine> _Precription_Medicines;
		
		private EntityRef<Medicine_Unit> _Medicine_Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicine_IDChanging(int value);
    partial void OnMedicine_IDChanged();
    partial void OnMedicine_NameChanging(string value);
    partial void OnMedicine_NameChanged();
    partial void OnMedicine_ClassChanging(string value);
    partial void OnMedicine_ClassChanged();
    partial void OnUnit_IDChanging(int value);
    partial void OnUnit_IDChanged();
    partial void OnMedicine_UsageChanging(string value);
    partial void OnMedicine_UsageChanged();
    partial void OnMedicine_NoteChanging(string value);
    partial void OnMedicine_NoteChanged();
    partial void OnMedicine_PriceChanging(System.Nullable<int> value);
    partial void OnMedicine_PriceChanged();
    #endregion
		
		public Medicine()
		{
			this._Medincine_Ingredients = new EntitySet<Medincine_Ingredient>(new Action<Medincine_Ingredient>(this.attach_Medincine_Ingredients), new Action<Medincine_Ingredient>(this.detach_Medincine_Ingredients));
			this._Precription_Medicines = new EntitySet<Precription_Medicine>(new Action<Precription_Medicine>(this.attach_Precription_Medicines), new Action<Precription_Medicine>(this.detach_Precription_Medicines));
			this._Medicine_Unit = default(EntityRef<Medicine_Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Medicine_ID
		{
			get
			{
				return this._Medicine_ID;
			}
			set
			{
				if ((this._Medicine_ID != value))
				{
					this.OnMedicine_IDChanging(value);
					this.SendPropertyChanging();
					this._Medicine_ID = value;
					this.SendPropertyChanged("Medicine_ID");
					this.OnMedicine_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Medicine_Name
		{
			get
			{
				return this._Medicine_Name;
			}
			set
			{
				if ((this._Medicine_Name != value))
				{
					this.OnMedicine_NameChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Name = value;
					this.SendPropertyChanged("Medicine_Name");
					this.OnMedicine_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Class", DbType="NVarChar(200)")]
		public string Medicine_Class
		{
			get
			{
				return this._Medicine_Class;
			}
			set
			{
				if ((this._Medicine_Class != value))
				{
					this.OnMedicine_ClassChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Class = value;
					this.SendPropertyChanged("Medicine_Class");
					this.OnMedicine_ClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_ID", DbType="Int NOT NULL")]
		public int Unit_ID
		{
			get
			{
				return this._Unit_ID;
			}
			set
			{
				if ((this._Unit_ID != value))
				{
					if (this._Medicine_Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnit_IDChanging(value);
					this.SendPropertyChanging();
					this._Unit_ID = value;
					this.SendPropertyChanged("Unit_ID");
					this.OnUnit_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Usage", DbType="NVarChar(200)")]
		public string Medicine_Usage
		{
			get
			{
				return this._Medicine_Usage;
			}
			set
			{
				if ((this._Medicine_Usage != value))
				{
					this.OnMedicine_UsageChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Usage = value;
					this.SendPropertyChanged("Medicine_Usage");
					this.OnMedicine_UsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Note", DbType="NVarChar(500)")]
		public string Medicine_Note
		{
			get
			{
				return this._Medicine_Note;
			}
			set
			{
				if ((this._Medicine_Note != value))
				{
					this.OnMedicine_NoteChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Note = value;
					this.SendPropertyChanged("Medicine_Note");
					this.OnMedicine_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Price", DbType="Int")]
		public System.Nullable<int> Medicine_Price
		{
			get
			{
				return this._Medicine_Price;
			}
			set
			{
				if ((this._Medicine_Price != value))
				{
					this.OnMedicine_PriceChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Price = value;
					this.SendPropertyChanged("Medicine_Price");
					this.OnMedicine_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Medincine_Ingredient", Storage="_Medincine_Ingredients", ThisKey="Medicine_ID", OtherKey="Medicine_ID")]
		public EntitySet<Medincine_Ingredient> Medincine_Ingredients
		{
			get
			{
				return this._Medincine_Ingredients;
			}
			set
			{
				this._Medincine_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Precription_Medicine", Storage="_Precription_Medicines", ThisKey="Medicine_ID", OtherKey="Medicine_ID")]
		public EntitySet<Precription_Medicine> Precription_Medicines
		{
			get
			{
				return this._Precription_Medicines;
			}
			set
			{
				this._Precription_Medicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Unit_Medicine", Storage="_Medicine_Unit", ThisKey="Unit_ID", OtherKey="Unit_ID", IsForeignKey=true)]
		public Medicine_Unit Medicine_Unit
		{
			get
			{
				return this._Medicine_Unit.Entity;
			}
			set
			{
				Medicine_Unit previousValue = this._Medicine_Unit.Entity;
				if (((previousValue != value) 
							|| (this._Medicine_Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine_Unit.Entity = null;
						previousValue.Medicines.Remove(this);
					}
					this._Medicine_Unit.Entity = value;
					if ((value != null))
					{
						value.Medicines.Add(this);
						this._Unit_ID = value.Unit_ID;
					}
					else
					{
						this._Unit_ID = default(int);
					}
					this.SendPropertyChanged("Medicine_Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medincine_Ingredients(Medincine_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_Medincine_Ingredients(Medincine_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
		
		private void attach_Precription_Medicines(Precription_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_Precription_Medicines(Precription_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine_Unit")]
	public partial class Medicine_Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Unit_ID;
		
		private string _Unit_Name;
		
		private string _Unit_Note;
		
		private EntitySet<Medicine> _Medicines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnit_IDChanging(int value);
    partial void OnUnit_IDChanged();
    partial void OnUnit_NameChanging(string value);
    partial void OnUnit_NameChanged();
    partial void OnUnit_NoteChanging(string value);
    partial void OnUnit_NoteChanged();
    #endregion
		
		public Medicine_Unit()
		{
			this._Medicines = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicines), new Action<Medicine>(this.detach_Medicines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Unit_ID
		{
			get
			{
				return this._Unit_ID;
			}
			set
			{
				if ((this._Unit_ID != value))
				{
					this.OnUnit_IDChanging(value);
					this.SendPropertyChanging();
					this._Unit_ID = value;
					this.SendPropertyChanged("Unit_ID");
					this.OnUnit_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit_Name
		{
			get
			{
				return this._Unit_Name;
			}
			set
			{
				if ((this._Unit_Name != value))
				{
					this.OnUnit_NameChanging(value);
					this.SendPropertyChanging();
					this._Unit_Name = value;
					this.SendPropertyChanged("Unit_Name");
					this.OnUnit_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Note", DbType="NVarChar(200)")]
		public string Unit_Note
		{
			get
			{
				return this._Unit_Note;
			}
			set
			{
				if ((this._Unit_Note != value))
				{
					this.OnUnit_NoteChanging(value);
					this.SendPropertyChanging();
					this._Unit_Note = value;
					this.SendPropertyChanged("Unit_Note");
					this.OnUnit_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Unit_Medicine", Storage="_Medicines", ThisKey="Unit_ID", OtherKey="Unit_ID")]
		public EntitySet<Medicine> Medicines
		{
			get
			{
				return this._Medicines;
			}
			set
			{
				this._Medicines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine_Unit = this;
		}
		
		private void detach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine_Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medincine_Ingredient")]
	public partial class Medincine_Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Medicine_ID;
		
		private int _Ingredient_ID;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<Medicine> _Medicine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicine_IDChanging(int value);
    partial void OnMedicine_IDChanged();
    partial void OnIngredient_IDChanging(int value);
    partial void OnIngredient_IDChanged();
    #endregion
		
		public Medincine_Ingredient()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._Medicine = default(EntityRef<Medicine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Medicine_ID
		{
			get
			{
				return this._Medicine_ID;
			}
			set
			{
				if ((this._Medicine_ID != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicine_IDChanging(value);
					this.SendPropertyChanging();
					this._Medicine_ID = value;
					this.SendPropertyChanged("Medicine_ID");
					this.OnMedicine_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ingredient_ID
		{
			get
			{
				return this._Ingredient_ID;
			}
			set
			{
				if ((this._Ingredient_ID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredient_IDChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_ID = value;
					this.SendPropertyChanged("Ingredient_ID");
					this.OnIngredient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Medincine_Ingredient", Storage="_Ingredient", ThisKey="Ingredient_ID", OtherKey="Ingredient_ID", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.Medincine_Ingredients.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.Medincine_Ingredients.Add(this);
						this._Ingredient_ID = value.Ingredient_ID;
					}
					else
					{
						this._Ingredient_ID = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Medincine_Ingredient", Storage="_Medicine", ThisKey="Medicine_ID", OtherKey="Medicine_ID", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.Medincine_Ingredients.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.Medincine_Ingredients.Add(this);
						this._Medicine_ID = value.Medicine_ID;
					}
					else
					{
						this._Medicine_ID = default(int);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paraclinical")]
	public partial class Paraclinical : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Paraclinical_ID;
		
		private string _Paraclinical_Name;
		
		private int _Paraclinical_Group_ID;
		
		private string _Paraclinical_Note;
		
		private string _Paraclinical_Unit;
		
		private string _Paraclinical_AnotherName;
		
		private string _Paraclinical_Link;
		
		private string _Paraclinical_Description;
		
		private string _Paraclinical_ReferenceValue;
		
		private System.Nullable<double> _Paraclinical_ValueMin;
		
		private System.Nullable<double> _Paraclinical_ValueMax;
		
		private string _Paraclinical_Category;
		
		private EntitySet<Paraclinical_Medicine> _Paraclinical_Medicines;
		
		private EntityRef<Paraclinical_Group> _Paraclinical_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParaclinical_IDChanging(string value);
    partial void OnParaclinical_IDChanged();
    partial void OnParaclinical_NameChanging(string value);
    partial void OnParaclinical_NameChanged();
    partial void OnParaclinical_Group_IDChanging(int value);
    partial void OnParaclinical_Group_IDChanged();
    partial void OnParaclinical_NoteChanging(string value);
    partial void OnParaclinical_NoteChanged();
    partial void OnParaclinical_UnitChanging(string value);
    partial void OnParaclinical_UnitChanged();
    partial void OnParaclinical_AnotherNameChanging(string value);
    partial void OnParaclinical_AnotherNameChanged();
    partial void OnParaclinical_LinkChanging(string value);
    partial void OnParaclinical_LinkChanged();
    partial void OnParaclinical_DescriptionChanging(string value);
    partial void OnParaclinical_DescriptionChanged();
    partial void OnParaclinical_ReferenceValueChanging(string value);
    partial void OnParaclinical_ReferenceValueChanged();
    partial void OnParaclinical_ValueMinChanging(System.Nullable<double> value);
    partial void OnParaclinical_ValueMinChanged();
    partial void OnParaclinical_ValueMaxChanging(System.Nullable<double> value);
    partial void OnParaclinical_ValueMaxChanged();
    partial void OnParaclinical_CategoryChanging(string value);
    partial void OnParaclinical_CategoryChanged();
    #endregion
		
		public Paraclinical()
		{
			this._Paraclinical_Medicines = new EntitySet<Paraclinical_Medicine>(new Action<Paraclinical_Medicine>(this.attach_Paraclinical_Medicines), new Action<Paraclinical_Medicine>(this.detach_Paraclinical_Medicines));
			this._Paraclinical_Group = default(EntityRef<Paraclinical_Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Paraclinical_ID
		{
			get
			{
				return this._Paraclinical_ID;
			}
			set
			{
				if ((this._Paraclinical_ID != value))
				{
					this.OnParaclinical_IDChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_ID = value;
					this.SendPropertyChanged("Paraclinical_ID");
					this.OnParaclinical_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Paraclinical_Name
		{
			get
			{
				return this._Paraclinical_Name;
			}
			set
			{
				if ((this._Paraclinical_Name != value))
				{
					this.OnParaclinical_NameChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Name = value;
					this.SendPropertyChanged("Paraclinical_Name");
					this.OnParaclinical_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Group_ID", DbType="Int NOT NULL")]
		public int Paraclinical_Group_ID
		{
			get
			{
				return this._Paraclinical_Group_ID;
			}
			set
			{
				if ((this._Paraclinical_Group_ID != value))
				{
					if (this._Paraclinical_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParaclinical_Group_IDChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Group_ID = value;
					this.SendPropertyChanged("Paraclinical_Group_ID");
					this.OnParaclinical_Group_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Note", DbType="NVarChar(500)")]
		public string Paraclinical_Note
		{
			get
			{
				return this._Paraclinical_Note;
			}
			set
			{
				if ((this._Paraclinical_Note != value))
				{
					this.OnParaclinical_NoteChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Note = value;
					this.SendPropertyChanged("Paraclinical_Note");
					this.OnParaclinical_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Unit", DbType="NVarChar(50)")]
		public string Paraclinical_Unit
		{
			get
			{
				return this._Paraclinical_Unit;
			}
			set
			{
				if ((this._Paraclinical_Unit != value))
				{
					this.OnParaclinical_UnitChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Unit = value;
					this.SendPropertyChanged("Paraclinical_Unit");
					this.OnParaclinical_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_AnotherName", DbType="NVarChar(100)")]
		public string Paraclinical_AnotherName
		{
			get
			{
				return this._Paraclinical_AnotherName;
			}
			set
			{
				if ((this._Paraclinical_AnotherName != value))
				{
					this.OnParaclinical_AnotherNameChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_AnotherName = value;
					this.SendPropertyChanged("Paraclinical_AnotherName");
					this.OnParaclinical_AnotherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Link", DbType="NVarChar(500)")]
		public string Paraclinical_Link
		{
			get
			{
				return this._Paraclinical_Link;
			}
			set
			{
				if ((this._Paraclinical_Link != value))
				{
					this.OnParaclinical_LinkChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Link = value;
					this.SendPropertyChanged("Paraclinical_Link");
					this.OnParaclinical_LinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Description", DbType="NVarChar(500)")]
		public string Paraclinical_Description
		{
			get
			{
				return this._Paraclinical_Description;
			}
			set
			{
				if ((this._Paraclinical_Description != value))
				{
					this.OnParaclinical_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Description = value;
					this.SendPropertyChanged("Paraclinical_Description");
					this.OnParaclinical_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_ReferenceValue", DbType="NVarChar(50)")]
		public string Paraclinical_ReferenceValue
		{
			get
			{
				return this._Paraclinical_ReferenceValue;
			}
			set
			{
				if ((this._Paraclinical_ReferenceValue != value))
				{
					this.OnParaclinical_ReferenceValueChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_ReferenceValue = value;
					this.SendPropertyChanged("Paraclinical_ReferenceValue");
					this.OnParaclinical_ReferenceValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_ValueMin", DbType="Float")]
		public System.Nullable<double> Paraclinical_ValueMin
		{
			get
			{
				return this._Paraclinical_ValueMin;
			}
			set
			{
				if ((this._Paraclinical_ValueMin != value))
				{
					this.OnParaclinical_ValueMinChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_ValueMin = value;
					this.SendPropertyChanged("Paraclinical_ValueMin");
					this.OnParaclinical_ValueMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_ValueMax", DbType="Float")]
		public System.Nullable<double> Paraclinical_ValueMax
		{
			get
			{
				return this._Paraclinical_ValueMax;
			}
			set
			{
				if ((this._Paraclinical_ValueMax != value))
				{
					this.OnParaclinical_ValueMaxChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_ValueMax = value;
					this.SendPropertyChanged("Paraclinical_ValueMax");
					this.OnParaclinical_ValueMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Category", DbType="NVarChar(200)")]
		public string Paraclinical_Category
		{
			get
			{
				return this._Paraclinical_Category;
			}
			set
			{
				if ((this._Paraclinical_Category != value))
				{
					this.OnParaclinical_CategoryChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Category = value;
					this.SendPropertyChanged("Paraclinical_Category");
					this.OnParaclinical_CategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paraclinical_Paraclinical_Medicine", Storage="_Paraclinical_Medicines", ThisKey="Paraclinical_ID", OtherKey="Paraclinical_ID")]
		public EntitySet<Paraclinical_Medicine> Paraclinical_Medicines
		{
			get
			{
				return this._Paraclinical_Medicines;
			}
			set
			{
				this._Paraclinical_Medicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paraclinical_Group_Paraclinical", Storage="_Paraclinical_Group", ThisKey="Paraclinical_Group_ID", OtherKey="Paraclinical_Group_ID", IsForeignKey=true)]
		public Paraclinical_Group Paraclinical_Group
		{
			get
			{
				return this._Paraclinical_Group.Entity;
			}
			set
			{
				Paraclinical_Group previousValue = this._Paraclinical_Group.Entity;
				if (((previousValue != value) 
							|| (this._Paraclinical_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paraclinical_Group.Entity = null;
						previousValue.Paraclinicals.Remove(this);
					}
					this._Paraclinical_Group.Entity = value;
					if ((value != null))
					{
						value.Paraclinicals.Add(this);
						this._Paraclinical_Group_ID = value.Paraclinical_Group_ID;
					}
					else
					{
						this._Paraclinical_Group_ID = default(int);
					}
					this.SendPropertyChanged("Paraclinical_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paraclinical_Medicines(Paraclinical_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Paraclinical = this;
		}
		
		private void detach_Paraclinical_Medicines(Paraclinical_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Paraclinical = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paraclinical_Group")]
	public partial class Paraclinical_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Paraclinical_Group_ID;
		
		private string _Paraclinical_Group_Name;
		
		private EntitySet<Paraclinical> _Paraclinicals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParaclinical_Group_IDChanging(int value);
    partial void OnParaclinical_Group_IDChanged();
    partial void OnParaclinical_Group_NameChanging(string value);
    partial void OnParaclinical_Group_NameChanged();
    #endregion
		
		public Paraclinical_Group()
		{
			this._Paraclinicals = new EntitySet<Paraclinical>(new Action<Paraclinical>(this.attach_Paraclinicals), new Action<Paraclinical>(this.detach_Paraclinicals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Group_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Paraclinical_Group_ID
		{
			get
			{
				return this._Paraclinical_Group_ID;
			}
			set
			{
				if ((this._Paraclinical_Group_ID != value))
				{
					this.OnParaclinical_Group_IDChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Group_ID = value;
					this.SendPropertyChanged("Paraclinical_Group_ID");
					this.OnParaclinical_Group_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_Group_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Paraclinical_Group_Name
		{
			get
			{
				return this._Paraclinical_Group_Name;
			}
			set
			{
				if ((this._Paraclinical_Group_Name != value))
				{
					this.OnParaclinical_Group_NameChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_Group_Name = value;
					this.SendPropertyChanged("Paraclinical_Group_Name");
					this.OnParaclinical_Group_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paraclinical_Group_Paraclinical", Storage="_Paraclinicals", ThisKey="Paraclinical_Group_ID", OtherKey="Paraclinical_Group_ID")]
		public EntitySet<Paraclinical> Paraclinicals
		{
			get
			{
				return this._Paraclinicals;
			}
			set
			{
				this._Paraclinicals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paraclinicals(Paraclinical entity)
		{
			this.SendPropertyChanging();
			entity.Paraclinical_Group = this;
		}
		
		private void detach_Paraclinicals(Paraclinical entity)
		{
			this.SendPropertyChanging();
			entity.Paraclinical_Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paraclinical_Medicine")]
	public partial class Paraclinical_Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Paraclinical_ID;
		
		private int _Precription_ID;
		
		private EntityRef<Paraclinical> _Paraclinical;
		
		private EntityRef<Precription> _Precription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParaclinical_IDChanging(string value);
    partial void OnParaclinical_IDChanged();
    partial void OnPrecription_IDChanging(int value);
    partial void OnPrecription_IDChanged();
    #endregion
		
		public Paraclinical_Medicine()
		{
			this._Paraclinical = default(EntityRef<Paraclinical>);
			this._Precription = default(EntityRef<Precription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paraclinical_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Paraclinical_ID
		{
			get
			{
				return this._Paraclinical_ID;
			}
			set
			{
				if ((this._Paraclinical_ID != value))
				{
					if (this._Paraclinical.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParaclinical_IDChanging(value);
					this.SendPropertyChanging();
					this._Paraclinical_ID = value;
					this.SendPropertyChanged("Paraclinical_ID");
					this.OnParaclinical_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Precription_ID
		{
			get
			{
				return this._Precription_ID;
			}
			set
			{
				if ((this._Precription_ID != value))
				{
					if (this._Precription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrecription_IDChanging(value);
					this.SendPropertyChanging();
					this._Precription_ID = value;
					this.SendPropertyChanged("Precription_ID");
					this.OnPrecription_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paraclinical_Paraclinical_Medicine", Storage="_Paraclinical", ThisKey="Paraclinical_ID", OtherKey="Paraclinical_ID", IsForeignKey=true)]
		public Paraclinical Paraclinical
		{
			get
			{
				return this._Paraclinical.Entity;
			}
			set
			{
				Paraclinical previousValue = this._Paraclinical.Entity;
				if (((previousValue != value) 
							|| (this._Paraclinical.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paraclinical.Entity = null;
						previousValue.Paraclinical_Medicines.Remove(this);
					}
					this._Paraclinical.Entity = value;
					if ((value != null))
					{
						value.Paraclinical_Medicines.Add(this);
						this._Paraclinical_ID = value.Paraclinical_ID;
					}
					else
					{
						this._Paraclinical_ID = default(string);
					}
					this.SendPropertyChanged("Paraclinical");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Paraclinical_Medicine", Storage="_Precription", ThisKey="Precription_ID", OtherKey="Precription_ID", IsForeignKey=true)]
		public Precription Precription
		{
			get
			{
				return this._Precription.Entity;
			}
			set
			{
				Precription previousValue = this._Precription.Entity;
				if (((previousValue != value) 
							|| (this._Precription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Precription.Entity = null;
						previousValue.Paraclinical_Medicines.Remove(this);
					}
					this._Precription.Entity = value;
					if ((value != null))
					{
						value.Paraclinical_Medicines.Add(this);
						this._Precription_ID = value.Precription_ID;
					}
					else
					{
						this._Precription_ID = default(int);
					}
					this.SendPropertyChanged("Precription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_ID;
		
		private string _Patient_Note;
		
		private System.Nullable<int> _Patient_Temperature;
		
		private System.Nullable<int> _Patient_BloodPressureThu;
		
		private System.Nullable<int> _Patient_BloodPressureTr;
		
		private System.Nullable<int> _Patient_Pulse;
		
		private System.Nullable<int> _Patient_Breathing;
		
		private System.Nullable<int> _Patient_Weight;
		
		private System.Nullable<int> _Patient_Height;
		
		private System.Nullable<int> _Patient_Waist;
		
		private System.Nullable<int> _Patient_Hips;
		
		private EntitySet<Appointmentss> _Appointmentsses;
		
		private EntitySet<Precription> _Precriptions;
		
		private EntityRef<Human> _Human;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnPatient_NoteChanging(string value);
    partial void OnPatient_NoteChanged();
    partial void OnPatient_TemperatureChanging(System.Nullable<int> value);
    partial void OnPatient_TemperatureChanged();
    partial void OnPatient_BloodPressureThuChanging(System.Nullable<int> value);
    partial void OnPatient_BloodPressureThuChanged();
    partial void OnPatient_BloodPressureTrChanging(System.Nullable<int> value);
    partial void OnPatient_BloodPressureTrChanged();
    partial void OnPatient_PulseChanging(System.Nullable<int> value);
    partial void OnPatient_PulseChanged();
    partial void OnPatient_BreathingChanging(System.Nullable<int> value);
    partial void OnPatient_BreathingChanged();
    partial void OnPatient_WeightChanging(System.Nullable<int> value);
    partial void OnPatient_WeightChanged();
    partial void OnPatient_HeightChanging(System.Nullable<int> value);
    partial void OnPatient_HeightChanged();
    partial void OnPatient_WaistChanging(System.Nullable<int> value);
    partial void OnPatient_WaistChanged();
    partial void OnPatient_HipsChanging(System.Nullable<int> value);
    partial void OnPatient_HipsChanged();
    #endregion
		
		public Patient()
		{
			this._Appointmentsses = new EntitySet<Appointmentss>(new Action<Appointmentss>(this.attach_Appointmentsses), new Action<Appointmentss>(this.detach_Appointmentsses));
			this._Precriptions = new EntitySet<Precription>(new Action<Precription>(this.attach_Precriptions), new Action<Precription>(this.detach_Precriptions));
			this._Human = default(EntityRef<Human>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._Human.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Note", DbType="NVarChar(500)")]
		public string Patient_Note
		{
			get
			{
				return this._Patient_Note;
			}
			set
			{
				if ((this._Patient_Note != value))
				{
					this.OnPatient_NoteChanging(value);
					this.SendPropertyChanging();
					this._Patient_Note = value;
					this.SendPropertyChanged("Patient_Note");
					this.OnPatient_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Temperature", DbType="Int")]
		public System.Nullable<int> Patient_Temperature
		{
			get
			{
				return this._Patient_Temperature;
			}
			set
			{
				if ((this._Patient_Temperature != value))
				{
					this.OnPatient_TemperatureChanging(value);
					this.SendPropertyChanging();
					this._Patient_Temperature = value;
					this.SendPropertyChanged("Patient_Temperature");
					this.OnPatient_TemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_BloodPressureThu", DbType="Int")]
		public System.Nullable<int> Patient_BloodPressureThu
		{
			get
			{
				return this._Patient_BloodPressureThu;
			}
			set
			{
				if ((this._Patient_BloodPressureThu != value))
				{
					this.OnPatient_BloodPressureThuChanging(value);
					this.SendPropertyChanging();
					this._Patient_BloodPressureThu = value;
					this.SendPropertyChanged("Patient_BloodPressureThu");
					this.OnPatient_BloodPressureThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_BloodPressureTr", DbType="Int")]
		public System.Nullable<int> Patient_BloodPressureTr
		{
			get
			{
				return this._Patient_BloodPressureTr;
			}
			set
			{
				if ((this._Patient_BloodPressureTr != value))
				{
					this.OnPatient_BloodPressureTrChanging(value);
					this.SendPropertyChanging();
					this._Patient_BloodPressureTr = value;
					this.SendPropertyChanged("Patient_BloodPressureTr");
					this.OnPatient_BloodPressureTrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Pulse", DbType="Int")]
		public System.Nullable<int> Patient_Pulse
		{
			get
			{
				return this._Patient_Pulse;
			}
			set
			{
				if ((this._Patient_Pulse != value))
				{
					this.OnPatient_PulseChanging(value);
					this.SendPropertyChanging();
					this._Patient_Pulse = value;
					this.SendPropertyChanged("Patient_Pulse");
					this.OnPatient_PulseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Breathing", DbType="Int")]
		public System.Nullable<int> Patient_Breathing
		{
			get
			{
				return this._Patient_Breathing;
			}
			set
			{
				if ((this._Patient_Breathing != value))
				{
					this.OnPatient_BreathingChanging(value);
					this.SendPropertyChanging();
					this._Patient_Breathing = value;
					this.SendPropertyChanged("Patient_Breathing");
					this.OnPatient_BreathingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Weight", DbType="Int")]
		public System.Nullable<int> Patient_Weight
		{
			get
			{
				return this._Patient_Weight;
			}
			set
			{
				if ((this._Patient_Weight != value))
				{
					this.OnPatient_WeightChanging(value);
					this.SendPropertyChanging();
					this._Patient_Weight = value;
					this.SendPropertyChanged("Patient_Weight");
					this.OnPatient_WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Height", DbType="Int")]
		public System.Nullable<int> Patient_Height
		{
			get
			{
				return this._Patient_Height;
			}
			set
			{
				if ((this._Patient_Height != value))
				{
					this.OnPatient_HeightChanging(value);
					this.SendPropertyChanging();
					this._Patient_Height = value;
					this.SendPropertyChanged("Patient_Height");
					this.OnPatient_HeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Waist", DbType="Int")]
		public System.Nullable<int> Patient_Waist
		{
			get
			{
				return this._Patient_Waist;
			}
			set
			{
				if ((this._Patient_Waist != value))
				{
					this.OnPatient_WaistChanging(value);
					this.SendPropertyChanging();
					this._Patient_Waist = value;
					this.SendPropertyChanged("Patient_Waist");
					this.OnPatient_WaistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Hips", DbType="Int")]
		public System.Nullable<int> Patient_Hips
		{
			get
			{
				return this._Patient_Hips;
			}
			set
			{
				if ((this._Patient_Hips != value))
				{
					this.OnPatient_HipsChanging(value);
					this.SendPropertyChanging();
					this._Patient_Hips = value;
					this.SendPropertyChanged("Patient_Hips");
					this.OnPatient_HipsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointmentss", Storage="_Appointmentsses", ThisKey="Account_ID", OtherKey="Account_ID_Patient")]
		public EntitySet<Appointmentss> Appointmentsses
		{
			get
			{
				return this._Appointmentsses;
			}
			set
			{
				this._Appointmentsses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Precription", Storage="_Precriptions", ThisKey="Account_ID", OtherKey="Account_ID_Patient")]
		public EntitySet<Precription> Precriptions
		{
			get
			{
				return this._Precriptions;
			}
			set
			{
				this._Precriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Human_Patient", Storage="_Human", ThisKey="Account_ID", OtherKey="Account_ID", IsForeignKey=true)]
		public Human Human
		{
			get
			{
				return this._Human.Entity;
			}
			set
			{
				Human previousValue = this._Human.Entity;
				if (((previousValue != value) 
							|| (this._Human.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Human.Entity = null;
						previousValue.Patient = null;
					}
					this._Human.Entity = value;
					if ((value != null))
					{
						value.Patient = this;
						this._Account_ID = value.Account_ID;
					}
					else
					{
						this._Account_ID = default(int);
					}
					this.SendPropertyChanged("Human");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointmentsses(Appointmentss entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointmentsses(Appointmentss entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Precriptions(Precription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Precriptions(Precription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Precription")]
	public partial class Precription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Precription_ID;
		
		private System.DateTime _Precription_Date;
		
		private System.Nullable<int> _Precription_Money;
		
		private System.Nullable<int> _Precription_Discount;
		
		private System.Nullable<int> _Precription_Amount;
		
		private string _Precription_Diagnose;
		
		private string _Precription_Checkup;
		
		private string _Precription_Treatment;
		
		private string _Precription_Note;
		
		private int _Account_ID_Patient;
		
		private int _Account_ID_Doctor;
		
		private EntitySet<Allergic> _Allergics;
		
		private EntitySet<Paraclinical_Medicine> _Paraclinical_Medicines;
		
		private EntitySet<Precription_Disease> _Precription_Diseases;
		
		private EntitySet<Precription_Medicine> _Precription_Medicines;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrecription_IDChanging(int value);
    partial void OnPrecription_IDChanged();
    partial void OnPrecription_DateChanging(System.DateTime value);
    partial void OnPrecription_DateChanged();
    partial void OnPrecription_MoneyChanging(System.Nullable<int> value);
    partial void OnPrecription_MoneyChanged();
    partial void OnPrecription_DiscountChanging(System.Nullable<int> value);
    partial void OnPrecription_DiscountChanged();
    partial void OnPrecription_AmountChanging(System.Nullable<int> value);
    partial void OnPrecription_AmountChanged();
    partial void OnPrecription_DiagnoseChanging(string value);
    partial void OnPrecription_DiagnoseChanged();
    partial void OnPrecription_CheckupChanging(string value);
    partial void OnPrecription_CheckupChanged();
    partial void OnPrecription_TreatmentChanging(string value);
    partial void OnPrecription_TreatmentChanged();
    partial void OnPrecription_NoteChanging(string value);
    partial void OnPrecription_NoteChanged();
    partial void OnAccount_ID_PatientChanging(int value);
    partial void OnAccount_ID_PatientChanged();
    partial void OnAccount_ID_DoctorChanging(int value);
    partial void OnAccount_ID_DoctorChanged();
    #endregion
		
		public Precription()
		{
			this._Allergics = new EntitySet<Allergic>(new Action<Allergic>(this.attach_Allergics), new Action<Allergic>(this.detach_Allergics));
			this._Paraclinical_Medicines = new EntitySet<Paraclinical_Medicine>(new Action<Paraclinical_Medicine>(this.attach_Paraclinical_Medicines), new Action<Paraclinical_Medicine>(this.detach_Paraclinical_Medicines));
			this._Precription_Diseases = new EntitySet<Precription_Disease>(new Action<Precription_Disease>(this.attach_Precription_Diseases), new Action<Precription_Disease>(this.detach_Precription_Diseases));
			this._Precription_Medicines = new EntitySet<Precription_Medicine>(new Action<Precription_Medicine>(this.attach_Precription_Medicines), new Action<Precription_Medicine>(this.detach_Precription_Medicines));
			this._Account = default(EntityRef<Account>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Precription_ID
		{
			get
			{
				return this._Precription_ID;
			}
			set
			{
				if ((this._Precription_ID != value))
				{
					this.OnPrecription_IDChanging(value);
					this.SendPropertyChanging();
					this._Precription_ID = value;
					this.SendPropertyChanged("Precription_ID");
					this.OnPrecription_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Precription_Date
		{
			get
			{
				return this._Precription_Date;
			}
			set
			{
				if ((this._Precription_Date != value))
				{
					this.OnPrecription_DateChanging(value);
					this.SendPropertyChanging();
					this._Precription_Date = value;
					this.SendPropertyChanged("Precription_Date");
					this.OnPrecription_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Money", DbType="Int")]
		public System.Nullable<int> Precription_Money
		{
			get
			{
				return this._Precription_Money;
			}
			set
			{
				if ((this._Precription_Money != value))
				{
					this.OnPrecription_MoneyChanging(value);
					this.SendPropertyChanging();
					this._Precription_Money = value;
					this.SendPropertyChanged("Precription_Money");
					this.OnPrecription_MoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Discount", DbType="Int")]
		public System.Nullable<int> Precription_Discount
		{
			get
			{
				return this._Precription_Discount;
			}
			set
			{
				if ((this._Precription_Discount != value))
				{
					this.OnPrecription_DiscountChanging(value);
					this.SendPropertyChanging();
					this._Precription_Discount = value;
					this.SendPropertyChanged("Precription_Discount");
					this.OnPrecription_DiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Amount", DbType="Int")]
		public System.Nullable<int> Precription_Amount
		{
			get
			{
				return this._Precription_Amount;
			}
			set
			{
				if ((this._Precription_Amount != value))
				{
					this.OnPrecription_AmountChanging(value);
					this.SendPropertyChanging();
					this._Precription_Amount = value;
					this.SendPropertyChanged("Precription_Amount");
					this.OnPrecription_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Diagnose", DbType="NVarChar(500)")]
		public string Precription_Diagnose
		{
			get
			{
				return this._Precription_Diagnose;
			}
			set
			{
				if ((this._Precription_Diagnose != value))
				{
					this.OnPrecription_DiagnoseChanging(value);
					this.SendPropertyChanging();
					this._Precription_Diagnose = value;
					this.SendPropertyChanged("Precription_Diagnose");
					this.OnPrecription_DiagnoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Checkup", DbType="NVarChar(500)")]
		public string Precription_Checkup
		{
			get
			{
				return this._Precription_Checkup;
			}
			set
			{
				if ((this._Precription_Checkup != value))
				{
					this.OnPrecription_CheckupChanging(value);
					this.SendPropertyChanging();
					this._Precription_Checkup = value;
					this.SendPropertyChanged("Precription_Checkup");
					this.OnPrecription_CheckupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Treatment", DbType="NVarChar(500)")]
		public string Precription_Treatment
		{
			get
			{
				return this._Precription_Treatment;
			}
			set
			{
				if ((this._Precription_Treatment != value))
				{
					this.OnPrecription_TreatmentChanging(value);
					this.SendPropertyChanging();
					this._Precription_Treatment = value;
					this.SendPropertyChanged("Precription_Treatment");
					this.OnPrecription_TreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_Note", DbType="NVarChar(500)")]
		public string Precription_Note
		{
			get
			{
				return this._Precription_Note;
			}
			set
			{
				if ((this._Precription_Note != value))
				{
					this.OnPrecription_NoteChanging(value);
					this.SendPropertyChanging();
					this._Precription_Note = value;
					this.SendPropertyChanged("Precription_Note");
					this.OnPrecription_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID_Patient", DbType="Int NOT NULL")]
		public int Account_ID_Patient
		{
			get
			{
				return this._Account_ID_Patient;
			}
			set
			{
				if ((this._Account_ID_Patient != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_ID_PatientChanging(value);
					this.SendPropertyChanging();
					this._Account_ID_Patient = value;
					this.SendPropertyChanged("Account_ID_Patient");
					this.OnAccount_ID_PatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID_Doctor", DbType="Int NOT NULL")]
		public int Account_ID_Doctor
		{
			get
			{
				return this._Account_ID_Doctor;
			}
			set
			{
				if ((this._Account_ID_Doctor != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_ID_DoctorChanging(value);
					this.SendPropertyChanging();
					this._Account_ID_Doctor = value;
					this.SendPropertyChanged("Account_ID_Doctor");
					this.OnAccount_ID_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Allergic", Storage="_Allergics", ThisKey="Precription_ID", OtherKey="Precription_ID")]
		public EntitySet<Allergic> Allergics
		{
			get
			{
				return this._Allergics;
			}
			set
			{
				this._Allergics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Paraclinical_Medicine", Storage="_Paraclinical_Medicines", ThisKey="Precription_ID", OtherKey="Precription_ID")]
		public EntitySet<Paraclinical_Medicine> Paraclinical_Medicines
		{
			get
			{
				return this._Paraclinical_Medicines;
			}
			set
			{
				this._Paraclinical_Medicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Precription_Disease", Storage="_Precription_Diseases", ThisKey="Precription_ID", OtherKey="Precription_ID")]
		public EntitySet<Precription_Disease> Precription_Diseases
		{
			get
			{
				return this._Precription_Diseases;
			}
			set
			{
				this._Precription_Diseases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Precription_Medicine", Storage="_Precription_Medicines", ThisKey="Precription_ID", OtherKey="Precription_ID")]
		public EntitySet<Precription_Medicine> Precription_Medicines
		{
			get
			{
				return this._Precription_Medicines;
			}
			set
			{
				this._Precription_Medicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Precription", Storage="_Account", ThisKey="Account_ID_Doctor", OtherKey="Account_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Precriptions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Precriptions.Add(this);
						this._Account_ID_Doctor = value.Account_ID;
					}
					else
					{
						this._Account_ID_Doctor = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Precription", Storage="_Patient", ThisKey="Account_ID_Patient", OtherKey="Account_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Precriptions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Precriptions.Add(this);
						this._Account_ID_Patient = value.Account_ID;
					}
					else
					{
						this._Account_ID_Patient = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Allergics(Allergic entity)
		{
			this.SendPropertyChanging();
			entity.Precription = this;
		}
		
		private void detach_Allergics(Allergic entity)
		{
			this.SendPropertyChanging();
			entity.Precription = null;
		}
		
		private void attach_Paraclinical_Medicines(Paraclinical_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Precription = this;
		}
		
		private void detach_Paraclinical_Medicines(Paraclinical_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Precription = null;
		}
		
		private void attach_Precription_Diseases(Precription_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Precription = this;
		}
		
		private void detach_Precription_Diseases(Precription_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Precription = null;
		}
		
		private void attach_Precription_Medicines(Precription_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Precription = this;
		}
		
		private void detach_Precription_Medicines(Precription_Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Precription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Precription_Disease")]
	public partial class Precription_Disease : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Precription_ID;
		
		private string _Disease_ID;
		
		private EntityRef<Disease> _Disease;
		
		private EntityRef<Precription> _Precription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrecription_IDChanging(int value);
    partial void OnPrecription_IDChanged();
    partial void OnDisease_IDChanging(string value);
    partial void OnDisease_IDChanged();
    #endregion
		
		public Precription_Disease()
		{
			this._Disease = default(EntityRef<Disease>);
			this._Precription = default(EntityRef<Precription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Precription_ID
		{
			get
			{
				return this._Precription_ID;
			}
			set
			{
				if ((this._Precription_ID != value))
				{
					if (this._Precription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrecription_IDChanging(value);
					this.SendPropertyChanging();
					this._Precription_ID = value;
					this.SendPropertyChanged("Precription_ID");
					this.OnPrecription_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Disease_ID
		{
			get
			{
				return this._Disease_ID;
			}
			set
			{
				if ((this._Disease_ID != value))
				{
					if (this._Disease.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisease_IDChanging(value);
					this.SendPropertyChanging();
					this._Disease_ID = value;
					this.SendPropertyChanged("Disease_ID");
					this.OnDisease_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_Precription_Disease", Storage="_Disease", ThisKey="Disease_ID", OtherKey="Disease_ID", IsForeignKey=true)]
		public Disease Disease
		{
			get
			{
				return this._Disease.Entity;
			}
			set
			{
				Disease previousValue = this._Disease.Entity;
				if (((previousValue != value) 
							|| (this._Disease.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disease.Entity = null;
						previousValue.Precription_Diseases.Remove(this);
					}
					this._Disease.Entity = value;
					if ((value != null))
					{
						value.Precription_Diseases.Add(this);
						this._Disease_ID = value.Disease_ID;
					}
					else
					{
						this._Disease_ID = default(string);
					}
					this.SendPropertyChanged("Disease");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Precription_Disease", Storage="_Precription", ThisKey="Precription_ID", OtherKey="Precription_ID", IsForeignKey=true)]
		public Precription Precription
		{
			get
			{
				return this._Precription.Entity;
			}
			set
			{
				Precription previousValue = this._Precription.Entity;
				if (((previousValue != value) 
							|| (this._Precription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Precription.Entity = null;
						previousValue.Precription_Diseases.Remove(this);
					}
					this._Precription.Entity = value;
					if ((value != null))
					{
						value.Precription_Diseases.Add(this);
						this._Precription_ID = value.Precription_ID;
					}
					else
					{
						this._Precription_ID = default(int);
					}
					this.SendPropertyChanged("Precription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Precription_Medicine")]
	public partial class Precription_Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Precription_ID;
		
		private int _Medicine_ID;
		
		private int _Quantity;
		
		private string _Note;
		
		private System.Nullable<int> _Amount;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<Precription> _Precription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrecription_IDChanging(int value);
    partial void OnPrecription_IDChanged();
    partial void OnMedicine_IDChanging(int value);
    partial void OnMedicine_IDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    #endregion
		
		public Precription_Medicine()
		{
			this._Medicine = default(EntityRef<Medicine>);
			this._Precription = default(EntityRef<Precription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precription_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Precription_ID
		{
			get
			{
				return this._Precription_ID;
			}
			set
			{
				if ((this._Precription_ID != value))
				{
					if (this._Precription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrecription_IDChanging(value);
					this.SendPropertyChanging();
					this._Precription_ID = value;
					this.SendPropertyChanged("Precription_ID");
					this.OnPrecription_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Medicine_ID
		{
			get
			{
				return this._Medicine_ID;
			}
			set
			{
				if ((this._Medicine_ID != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicine_IDChanging(value);
					this.SendPropertyChanging();
					this._Medicine_ID = value;
					this.SendPropertyChanged("Medicine_ID");
					this.OnMedicine_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(500)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Precription_Medicine", Storage="_Medicine", ThisKey="Medicine_ID", OtherKey="Medicine_ID", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.Precription_Medicines.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.Precription_Medicines.Add(this);
						this._Medicine_ID = value.Medicine_ID;
					}
					else
					{
						this._Medicine_ID = default(int);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precription_Precription_Medicine", Storage="_Precription", ThisKey="Precription_ID", OtherKey="Precription_ID", IsForeignKey=true)]
		public Precription Precription
		{
			get
			{
				return this._Precription.Entity;
			}
			set
			{
				Precription previousValue = this._Precription.Entity;
				if (((previousValue != value) 
							|| (this._Precription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Precription.Entity = null;
						previousValue.Precription_Medicines.Remove(this);
					}
					this._Precription.Entity = value;
					if ((value != null))
					{
						value.Precription_Medicines.Add(this);
						this._Precription_ID = value.Precription_ID;
					}
					else
					{
						this._Precription_ID = default(int);
					}
					this.SendPropertyChanged("Precription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
